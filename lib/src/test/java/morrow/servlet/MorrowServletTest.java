/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package morrow.servlet;

import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.servlet.ServletHandler;
import org.junit.jupiter.api.Test;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;

class MorrowServletTest {
    @Test
    void visitMissingEndpoint() throws Exception {
        var port = 62117;
        runServlet(port);

        HttpClient client = HttpClient.newHttpClient();
        var request = HttpRequest.newBuilder()
                .uri(URI.create("http://localhost:%d/missing".formatted(port)))
                .header("Accept", "application/json")
                .GET()
                .build();
        HttpResponse<String> httpResponse = client.send(request, HttpResponse.BodyHandlers.ofString());
        assertEquals("{\"status\": \"not found\"}", httpResponse.body());


    }

    @Test
    void visitEndpointWithHardwiredView() throws Exception {
        var port = 62118;
        runServlet(port);

        HttpClient client = HttpClient.newHttpClient();
        var request = HttpRequest.newBuilder()
                .uri(URI.create("http://localhost:%d/vehicles/cars".formatted(port)))
                .header("Accept", "application/json")
                .GET()
                .build();
        HttpResponse<String> httpResponse = client.send(request, HttpResponse.BodyHandlers.ofString());
        assertEquals("{\"status\":\"ok\"}", httpResponse.body());


    }
    @Test
    void visitEndpointWithViewMappedFromModel() throws Exception {
        var port = 62119;
        runServlet(port);

        HttpClient client = HttpClient.newHttpClient();
        var request = HttpRequest.newBuilder()
                .uri(URI.create("http://localhost:%d/vehicles/cars/32".formatted(port)))
                .header("Accept", "application/json")
                .GET()
                .build();
        HttpResponse<String> httpResponse = client.send(request, HttpResponse.BodyHandlers.ofString());
        assertEquals("{\"size\":100}", httpResponse.body());


    }

    private static void runServlet(int port) throws Exception {
        Server server = new Server(port);
        ServletHandler servletHandler = new ServletHandler();
        servletHandler.addServletWithMapping(MorrowServlet.class, "/*");
        server.setHandler(servletHandler);
        server.start();
    }

}
